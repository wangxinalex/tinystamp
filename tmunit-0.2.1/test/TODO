
- The  makefile  system should  know  whether  it  is in  COMPILE_FOR_TEST  or
  COMPILE_FOR_EXECUTION mode. If a program is compiled using

  	make

  it should be in COMPILE_FOR_EXECUTION mode (unless otherwise
  specified). Similarly a compilation with 

        make tests

  should be in COMPILE_FOR_TEST mode (unless otherwise specified).
   

- So far the summary of commands requested by the test system
  
     clean
     replace
     enable
     disable
     help
     failed      
     ? add 	 I can think of doing such a thing 
                    It will put the desired input and reference files into the
		    desired directory

     ? remove    I can think of doing such a thing
                    It will  remove the desired test from  the system (freeing
     		    the number  used by this test  to be assigned  to the next
     		    test that is added to the system)


     Parameters required by the test system
	DIR	
	NO


- The test system assigns a number to each leaf dir that has a test inside.
  For each test the system reports which test has PASSED/FAILED

- The user can run the test using 
      make tests NO=TestNo

  where TestNo is the number assigned by the test system to the test.

- The user can ask to replace the output of the current executable with the
  older reference.log (if the output does not match reference.log)  using 

      make tests replace
         or 
      make tests DIR=SubDirName replace 
         or
      make tests NO=TestNo replace

  The first one works such that it replaces the current generated log with the
  existing reference.log for  all the tests.  The second is  the same with the
  difference that the testing is performed  only in the sub directory given in
  SubDirName. Thus,  the scope  of replace is  narrowed down using  the second
  one.  The  third one  applies the  test only to  test no  TestNo and  does a
  replace if requested.
  
  A replace  request triggers  an svn commit  before performing any  first (so
  that  previous reference.log can  be saved  and if  an erroneous  replace is
  requested this problem can be resolved later)

- Cleaning test directories from unwanted files. Usage

      make tests clean
    
    will do a    
            rm -rf *~

    in all subdirectories
       

- It should  be possible to Enable/Disable  a test inside the  test suite.  (A
  simple idea  is to generate  a dummy file  named DISABLED or INVALID  if the
  test is disabled/invalidated and no such  file when the test is enabled. The
  run_test script should then check whether the directory has those files to
  understand whether it should perform the tests inside).

  The system can enable or disable test with commands like
 
       make tests enable           --> Enable all tests (if not enabled)
       make tests enable DIR=SubDirName   --> Enable all tests in SubDirName
       make tests enable NO=TestNo        --> Enable test no TestNo
 
  Disable works the same way as enable (just replacing disable with enable)


- The test system should report the summary of failed tests at the end of test
  suite. We can also mark some of the tests to be "sometimes failing due to OS
  scheduling issues" and give  a list of those tests to the  user if there are
  some failing tests.  The user can be informed that those  tests may not fail
  with another run.


- A user interface such that

      make tests help
         Prints a help on how the help system is used.

      make tests DIR=SubDirName
         Executes the tests only under "SubDirName" and its subdirs recursively.

      make tests failed
         Reports the list of last failed tests (also assigning a number to it).
	 
      make tests failed=n
         Runs the failed test number "n" without suppressing diff result
         performed with respect to the reference output. It also converves the 
         output generated by the current run.

